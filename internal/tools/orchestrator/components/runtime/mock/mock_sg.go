// Code generated by MockGen. DO NOT EDIT.
// Source: ../../scheduler/impl/servicegroup/servicegroup.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	apistructs "github.com/erda-project/erda/apistructs"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceGroup is a mock of ServiceGroup interface.
type MockServiceGroup struct {
	ctrl     *gomock.Controller
	recorder *MockServiceGroupMockRecorder
}

// MockServiceGroupMockRecorder is the mock recorder for MockServiceGroup.
type MockServiceGroupMockRecorder struct {
	mock *MockServiceGroup
}

// NewMockServiceGroup creates a new mock instance.
func NewMockServiceGroup(ctrl *gomock.Controller) *MockServiceGroup {
	mock := &MockServiceGroup{ctrl: ctrl}
	mock.recorder = &MockServiceGroupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceGroup) EXPECT() *MockServiceGroupMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockServiceGroup) Cancel(namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockServiceGroupMockRecorder) Cancel(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockServiceGroup)(nil).Cancel), namespace, name)
}

// ConfigUpdate mocks base method.
func (m *MockServiceGroup) ConfigUpdate(sg apistructs.ServiceGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigUpdate", sg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigUpdate indicates an expected call of ConfigUpdate.
func (mr *MockServiceGroupMockRecorder) ConfigUpdate(sg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigUpdate", reflect.TypeOf((*MockServiceGroup)(nil).ConfigUpdate), sg)
}

// Create mocks base method.
func (m *MockServiceGroup) Create(sg apistructs.ServiceGroupCreateV2Request) (apistructs.ServiceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", sg)
	ret0, _ := ret[0].(apistructs.ServiceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceGroupMockRecorder) Create(sg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServiceGroup)(nil).Create), sg)
}

// Delete mocks base method.
func (m *MockServiceGroup) Delete(namespace, name, force string, extra map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", namespace, name, force, extra)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceGroupMockRecorder) Delete(namespace, name, force, extra interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceGroup)(nil).Delete), namespace, name, force, extra)
}

// Info mocks base method.
func (m *MockServiceGroup) Info(ctx context.Context, namespace, name string) (apistructs.ServiceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info", ctx, namespace, name)
	ret0, _ := ret[0].(apistructs.ServiceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Info indicates an expected call of Info.
func (mr *MockServiceGroupMockRecorder) Info(ctx, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockServiceGroup)(nil).Info), ctx, namespace, name)
}

// InspectServiceGroupWithTimeout mocks base method.
func (m *MockServiceGroup) InspectServiceGroupWithTimeout(namespace, name string) (*apistructs.ServiceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InspectServiceGroupWithTimeout", namespace, name)
	ret0, _ := ret[0].(*apistructs.ServiceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InspectServiceGroupWithTimeout indicates an expected call of InspectServiceGroupWithTimeout.
func (mr *MockServiceGroupMockRecorder) InspectServiceGroupWithTimeout(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InspectServiceGroupWithTimeout", reflect.TypeOf((*MockServiceGroup)(nil).InspectServiceGroupWithTimeout), namespace, name)
}

// KillPod mocks base method.
func (m *MockServiceGroup) KillPod(ctx context.Context, namespace, name, podname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillPod", ctx, namespace, name, podname)
	ret0, _ := ret[0].(error)
	return ret0
}

// KillPod indicates an expected call of KillPod.
func (mr *MockServiceGroupMockRecorder) KillPod(ctx, namespace, name, podname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillPod", reflect.TypeOf((*MockServiceGroup)(nil).KillPod), ctx, namespace, name, podname)
}

// Precheck mocks base method.
func (m *MockServiceGroup) Precheck(sg apistructs.ServiceGroupPrecheckRequest) (apistructs.ServiceGroupPrecheckData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Precheck", sg)
	ret0, _ := ret[0].(apistructs.ServiceGroupPrecheckData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Precheck indicates an expected call of Precheck.
func (mr *MockServiceGroupMockRecorder) Precheck(sg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Precheck", reflect.TypeOf((*MockServiceGroup)(nil).Precheck), sg)
}

// Restart mocks base method.
func (m *MockServiceGroup) Restart(namespace, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restart", namespace, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Restart indicates an expected call of Restart.
func (mr *MockServiceGroupMockRecorder) Restart(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockServiceGroup)(nil).Restart), namespace, name)
}

// Scale mocks base method.
func (m *MockServiceGroup) Scale(sg *apistructs.ServiceGroup) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scale", sg)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scale indicates an expected call of Scale.
func (mr *MockServiceGroupMockRecorder) Scale(sg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scale", reflect.TypeOf((*MockServiceGroup)(nil).Scale), sg)
}

// Update mocks base method.
func (m *MockServiceGroup) Update(sg apistructs.ServiceGroupUpdateV2Request) (apistructs.ServiceGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", sg)
	ret0, _ := ret[0].(apistructs.ServiceGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceGroupMockRecorder) Update(sg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceGroup)(nil).Update), sg)
}
